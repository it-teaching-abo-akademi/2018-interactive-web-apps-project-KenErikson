{"version":3,"sources":["components/TextInput.js","components/TextField.js","components/Stock.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","title","evt","preventDefault","newTitle","handleTitle","setState","target","value","_this2","text","react_default","a","createElement","className","ref","onSubmit","handleInput","type","onChange","updateInputValue","Component","TextField","Stock","DECIMALS_UNIT","DECIMALS_TOTAL","toggleSelectedStock","name","DIVIDER_UNIT","Math","pow","DIVIDER_TOTAL","exchangeRate","isShowingEruos","getExchangeRate","parseInt","price","quantity","toggleSelected","checked","selected","Portfolio","savedState","userIsEditing","userIsAddingStock","showingEuro","errorText","addStockQuantity","addStockName","id","stocks","newState","oldAttr","newAttr","savePortfolio","EXCHANGE_RATE_USD_TO_EUR","resetErrorText","setAndSaveState","terms","stockUrl","API_KEY","console","log","axios","get","addQuantity","addQuantityInt","getPending","setErrorText","newStocks","exists","stockIndex","i","length","setStock","fetchStockData","then","res","data","prices","stock","push","key","index","updateStockPrices","catch","error","validity","valid","addStock","_this3","handleAddStockSubmit","htmlFor","pattern","handleChangeStockName","step","min","max","handleChangeStockQuantity","onClick","toggleAddingStock","errortext","_this4","setUnitValue","found","existingStock","oldQuantity","oldPrice","newStock","splice","totalValue","parseFloat","titleField","toggleText","removeSelectedButton","_this5","savedStocks","selectedExists","removeSelected","disabled","components_Stock","components_TextInput","updateTitle","components_TextField","addStockFields","addStockButton","getAddStockFields","currentlyShowingCurrency","notShowingCurrency","calculateTotalValue","formHeaderWrapper","toggleEditing","toggleShowingEuro","App","localStorageState","JSON","parse","window","localStorage","getItem","triedInitExchangeRateLoad","infoText","portfolioCount","portfolios","nextId","portfolioState","newPortfolio","updateExchangeRate","setInfoText","stringify","setItem","newPortfolioCount","newPortfolios","removed","url","response","addPortfolioButton","addPortfolio","portfoliosState","_loop","savedPortfolioState","components_Portfolio","removePortfolio","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d876c3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValue: props.title\n        }\n    }\n    handleInput(evt) {\n        evt.preventDefault();\n        const newTitle = this.state.inputValue;\n        this.props.handleTitle(newTitle);\n\n    }\n    updateInputValue(evt) {\n        evt.preventDefault();\n        this.setState({\n            inputValue: evt.target.value\n        });\n    }\n\n\n    // handleAddStockSubmit(evt) {\n    //     this.resetErrorText();\n    //     evt.preventDefault()\n    //     const name = evt.target.name.value;\n    //     const quantity = evt.target.quantity.value;\n    //     this.addStock(name, quantity);\n    // }\n\n    render() {\n        var text = this.state.inputValue;\n        return (\n            <form className=\"Add-Stock-Form\" ref=\"form\" onSubmit={(evt) => this.handleInput(evt)}>\n                <input\n                    className=\"Portfolio-Title\"\n                    type=\"text\"\n                    value={text}\n                    onChange={evt => this.updateInputValue(evt)}\n                ></input>\n                <button type=\"submit\">Save</button>\n            </form>\n        )\n    }\n}\n\nexport default TextInput;","import React, { Component } from 'react';\n\nclass TextField extends Component {\n    render() {\n      var text = this.props.title\n      return (\n  \n        <span className=\"Portfolio-Title\">{text}</span>\n  \n      )\n    }\n  }\n\nexport default TextField;","import React, { Component } from 'react';\n\nclass Stock extends Component {\n    constructor(props) {\n        super(props);\n        this.DECIMALS_UNIT = 3;\n        this.DECIMALS_TOTAL = 2;\n    }\n\n    toggleSelected() {\n        this.props.toggleSelectedStock(this.props.name);\n    }\n\n    render() {\n        const DIVIDER_UNIT = 10 ** this.DECIMALS_UNIT;\n        const DIVIDER_TOTAL = 10 ** this.DECIMALS_TOTAL;\n        const showingEuros = this.props.isShowingEruos();\n        var exchangeRate = 1;\n        if (showingEuros) {\n            exchangeRate = this.props.getExchangeRate();\n        }\n        return (\n            <tr>\n                <td className=\"large-col\">{this.props.name}</td>\n                <td className=\"large-col\">{parseInt(this.props.price * exchangeRate * DIVIDER_UNIT) / DIVIDER_UNIT}</td>\n                <td className=\"small-col\">{this.props.quantity}</td>\n                <td className=\"large-col\">{parseInt(this.props.price * exchangeRate * this.props.quantity * (DIVIDER_TOTAL)) / (DIVIDER_TOTAL)}</td>\n                <td className=\"small-col\"><input type=\"checkbox\" name=\"selected\" value=\"selected\" onChange={() => this.toggleSelected()} checked={this.props.selected} /></td>\n            </tr>\n        );\n    }\n}\n\n\nexport default Stock;","import React, { Component } from 'react';\nimport TextInput from './TextInput';\nimport TextField from './TextField';\nimport Stock from './Stock';\nimport axios from 'axios';\n\nclass Portfolio extends Component {\n    constructor(props) {\n        super(props);\n        const savedState = props.state;\n        if (savedState != null) {\n            this.state = savedState;\n        } else {\n            this.state = {\n                userIsEditing: false,\n                userIsAddingStock: false,\n                showingEuro: false,\n                errorText: \"\",\n                addStockQuantity: 1,\n                addStockName: \"\",\n                title: (\"Portfolio \" + props.id),\n                stocks: []\n            }\n        }\n    }\n\n    setAndSaveState(state) {\n        var newState = this.state;\n        for (var oldAttr in newState) {\n            for (var newAttr in state) {\n                if (oldAttr === newAttr) {\n                    newState[newAttr] = state[newAttr];\n                }\n            }\n        }\n\n        this.setState(newState);\n        this.props.savePortfolio(newState);\n    }\n\n    getExchangeRate() {\n        return this.props.EXCHANGE_RATE_USD_TO_EUR;\n    }\n\n    isShowingEruos() {\n        return !!this.state.showingEuro;\n    }\n\n    toggleEditing() {\n        this.resetErrorText();\n        var userIsEditing = !this.state.userIsEditing;\n        this.setAndSaveState({\n            userIsEditing: userIsEditing,\n        });\n    }\n\n    toggleAddingStock() {\n        this.resetErrorText();\n        var userIsAddingStock = !this.state.userIsAddingStock;\n        this.setAndSaveState({\n            userIsAddingStock: userIsAddingStock,\n        });\n    }\n\n    updateTitle(newTitle) {\n        this.resetErrorText();\n        this.setAndSaveState({\n            title: newTitle,\n            userIsEditing: false,\n        })\n    }\n\n    fetchStockData(terms) {\n        const stockUrl = \"https://www.alphavantage.co/query?function=BATCH_STOCK_QUOTES&symbols=\" + terms + \"&apikey=\" + this.props.API_KEY;\n        console.log(stockUrl);\n        return axios.get(stockUrl)\n    }\n\n    addStock(name, addQuantity) {\n        var addQuantityInt = parseInt(addQuantity);\n        if (name !== '' && addQuantityInt > 0) {\n            if (!this.getPending) {\n                this.getPending = true;\n                var newStocks = this.state.stocks;\n                var exists = false;\n                var stockIndex = -1;\n                for (var i = 0; i < newStocks.length; i++) {\n                    if (newStocks[i].name === name) {\n                        exists = true;\n                        stockIndex = i;\n                        break;\n                    }\n                }\n                if (exists) {\n                    this.setStock(stockIndex, addQuantityInt, -1);\n                    this.getPending = false;\n                } else {\n                    if (newStocks.length < 50) {\n                        const pricesPromise = this.fetchStockData(name);\n                        pricesPromise.then(res => {\n                            var stocks = res.data['Stock Quotes'];\n                            if (stocks === null) {\n                                this.setErrorText(\"Error getting data for '\" + name + \"' from API, probably overused API-key\");\n                            } else {\n                                var prices = [];\n                                for (var i = 0; i < stocks.length; i++) {\n                                    const stock = stocks[0];\n                                    const name = stock[\"1. symbol\"];\n                                    const price = stock[\"2. price\"];\n                                    prices.push({ name: name, price: price });\n                                }\n                                if (prices.length === 1) {\n                                    var exists = false;\n                                    var stockIndex = -1;\n                                    for (i = 0; i < newStocks.length; i++) {\n                                        if (newStocks[i].key === name) {\n                                            exists = true;\n                                            stockIndex = i;\n                                            break;\n                                        }\n                                    }\n                                    if (!exists) {\n                                        newStocks.push(\n                                            {\n                                                name: name,\n                                                quantity: addQuantityInt,\n                                                price: prices[0].price,\n                                                selected: false,\n                                                index: newStocks.length,\n                                            }\n                                        );\n                                        this.setAndSaveState({\n                                            stocks: newStocks\n                                        });\n                                        this.updateStockPrices();\n                                    } else {\n                                        for (i = 0; i < newStocks.length; i++) {\n                                            if (newStocks[i].name === name) {\n                                                exists = true;\n                                                stockIndex = i;\n                                                break;\n                                            }\n                                        }\n                                        if (exists) {\n                                            this.setStock(stockIndex, addQuantityInt, -1)\n                                        }\n                                    }\n                                } else {\n                                    this.setErrorText(\"Can't find stock for symbol '\" + name + \"'\");\n                                }\n                            }\n                            this.getPending = false;\n                        })\n                            .catch(error => { console.log(error); this.setErrorText(\"Error during updating stocks: \" + error) });\n\n                    } else {\n                        this.setErrorText(\"Can't add more unique stock names.\");\n                    }\n                }\n            } else {\n                this.setErrorText(\"Adding stock too fast, take a deep breath.\");\n            }\n        } else {\n            if(name ===''){\n                this.setErrorText(\"Can't add stock with empty name\");\n            }else{\n                this.setErrorText(\"Can't add stock with quantity<1\");\n            }\n        }\n    }\n\n    handleChangeStockQuantity(evt) {\n        const addStockQuantity = (evt.target.validity.valid) ? evt.target.value : this.state.addStockQuantity;\n        this.setAndSaveState({\n            addStockQuantity: addStockQuantity\n        })\n    }\n\n    handleChangeStockName(evt) {\n        const addStockName = (evt.target.validity.valid) ? evt.target.value : this.state.addStockName;\n        this.setAndSaveState({\n            addStockName: addStockName\n        })\n    }\n\n    handleAddStockSubmit(evt) {\n        this.resetErrorText();\n        evt.preventDefault()\n        const name = evt.target.name.value;\n        const quantity = evt.target.quantity.value;\n        this.addStock(name, quantity);\n    }\n\n    getAddStockFields() {\n        return (\n            <div className=\"row\">\n                <form className=\"Add-Stock-Form\" ref=\"form\" onSubmit={(evt) => this.handleAddStockSubmit(evt)}>\n                    <label htmlFor=\"name\">Stock Name:</label>\n                    <input id=\"name\" value={this.state.addStockName} type=\"text\" pattern=\"[A-Z-.]{0,5}\" onChange={evt => this.handleChangeStockName(evt)} />\n                    <label htmlFor=\"quantity\">Quantity:</label>\n                    <input id=\"quantity\" type=\"number\" step=\"1\" min=\"1\" max=\"1000000\" onChange={evt => this.handleChangeStockQuantity(evt)} value={this.state.addStockQuantity} />\n                    <button type=\"submit\">Add stock</button>\n                </form>\n                <button onClick={() => this.toggleAddingStock()}>Cancel</button>\n            </div>\n        );\n    }\n\n    resetErrorText() {\n        this.setAndSaveState({ errorText: \"\", });\n    }\n\n    setErrorText(errortext) {\n        this.setAndSaveState({ errorText: errortext });\n    }\n\n    updateStockPrices() {\n        const stocks = this.state.stocks;\n        var terms = \"\";\n        for (var i = 0; i < stocks.length; i++) {\n            if (i > 0) {\n                terms += \",\";\n            }\n            terms += stocks[i].name;\n        }\n        if (terms !== \"\") {\n            const pricesPromise = this.fetchStockData(terms);\n            pricesPromise.then(res => {\n                var stocks = res.data['Stock Quotes'];\n                if (stocks === null) {\n                    this.setErrorText(\"Error updating all stocks from API, probably overused API-key\");\n                } else {\n                    for (var i = 0; i < stocks.length; i++) {\n                        const stock = stocks[i];\n                        const name = stock[\"1. symbol\"];\n                        const price = stock[\"2. price\"];\n                        this.setUnitValue(name, price);\n                    }\n                }\n            })\n                .catch(error => { console.log(error); this.setErrorText(\"Error during updating stocks: \" + error) });\n        }\n    }\n\n    toggleShowingEuro() {\n        var showingEuro = !this.state.showingEuro;\n        this.setAndSaveState({ showingEuro: showingEuro });\n\n        const stocks = this.state.stocks;\n        for (var i = 0; i < stocks.length; i++) {\n            this.setStock(i, 0, -1);\n        }\n    }\n\n    setUnitValue(name, price) {\n        var newStocks = this.state.stocks;\n        var found = false;\n        for (var i = 0; i < newStocks.length; i++) {\n            if (newStocks[i].name === name) {\n                this.setStock(i, 0, price);\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            this.setErrorText(\"Couldn't find '\" + name + \"' when updating prices.\");\n        }\n    }\n\n    /* -1 to keep old price */\n    setStock(stockIndex, addQuantity, price) {\n\n        var addQuantityInt = parseInt(addQuantity);\n        var newStocks = this.state.stocks;\n        var existingStock = newStocks[stockIndex];\n        const name = existingStock.name;\n        const oldQuantity = parseInt(existingStock.quantity);\n        const oldPrice = existingStock.price;\n        if (price === -1) {\n            price = oldPrice;\n        }\n        var newStock = ({\n            name: name,\n            quantity: oldQuantity + addQuantityInt,\n            price: price,\n            selected: false,\n            index: stockIndex,\n        }\n        );\n        newStocks.splice(stockIndex, 1, newStock);\n        this.setAndSaveState({\n            stocks: newStocks\n        });\n    }\n\n    calculateTotalValue() {\n        const stocks = this.state.stocks;\n        var totalValue = 0;\n        for (var i = 0; i < stocks.length; i++) {\n            totalValue += parseFloat(stocks[i].price * stocks[i].quantity);\n        }\n        if (this.state.showingEuro) {\n            totalValue = totalValue * this.props.EXCHANGE_RATE_USD_TO_EUR;\n        }\n        return parseInt(totalValue * 100) / 100.0;\n    }\n\n    toggleSelectedStock(name) {\n        var stockIndex = -1;\n        var found = false;\n        var stocks = this.state.stocks;\n        for (var i = 0; i < stocks.length; i++) {\n            var newStock = stocks[i];\n            if (newStock.name === name) {\n                found = true;\n                stockIndex = i;\n                break;\n            }\n        }\n        if (found) {\n            const newStock = stocks[stockIndex];\n            newStock['selected'] = !newStock['selected'];\n            stocks.splice(stockIndex, 1, newStock);\n            this.setAndSaveState({ stocks });\n        } else {\n            this.setErrorText(\"Found no stock with name:\" + name);\n        }\n    }\n\n    removeSelected() {\n        var newStocks = this.state.stocks;\n        for (var i = newStocks.length - 1; i >= 0; i--) {\n            const stockToRemove = newStocks[i];\n            if (stockToRemove.selected) {\n                newStocks.splice(i, 1);\n            }\n        }\n        this.setAndSaveState({ stocks: newStocks });\n    }\n\n    render() {\n        const userIsEditing = this.state.userIsEditing;\n        const userIsAddingStock = this.state.userIsAddingStock;\n        var titleField;\n        var toggleText;\n        const savedStocks = this.state.stocks;\n\n        var selectedExists = false;\n        for(var i=0;i<savedStocks.length;i++){\n            if(savedStocks[i].selected){\n                selectedExists = true;\n                break;\n            }\n        }\n\n        var removeSelectedButton;\n        if(selectedExists){\n            removeSelectedButton = <button onClick={() => this.removeSelected()}>Remove selected</button>\n        }else{\n            removeSelectedButton = <button className=\"Disabled-Button\" disabled>Remove selected</button>\n        }\n\n        var stocks = [];\n        for (i = 0; i < savedStocks.length; i++) {\n            const name = savedStocks[i].name;\n            const price = savedStocks[i].price;\n            const quantity = savedStocks[i].quantity;\n            const selected = savedStocks[i].selected;\n            stocks.push(\n                <Stock\n                    key={name}\n                    name={name}\n                    price={price}\n                    quantity={quantity}\n                    selected={selected}\n                    index={i}\n                    getExchangeRate={() => this.getExchangeRate()}\n                    isShowingEruos={() => this.isShowingEruos()}\n                    toggleSelectedStock={(name) => this.toggleSelectedStock(name)}\n                />\n            );\n        }\n        const errorText = this.state.errorText;\n        const showingEuro = this.state.showingEuro;\n        if (userIsEditing) {\n            toggleText = \"Cancel\";\n            titleField = <TextInput className=\"Portfolio-Title\"\n                title={this.state.title}\n                handleTitle={(title) => this.updateTitle(title)}\n            />\n        } else {\n            toggleText = \"Edit\";\n            titleField = <TextField className=\"Portfolio-Title\"\n                title={this.state.title} />\n        }\n\n        var addStockButton = <button onClick={() => this.toggleAddingStock()}>Add Stocks</button>;\n        var addStockFields;\n        if (userIsAddingStock) {\n            addStockFields = this.getAddStockFields();\n            addStockButton = <button className=\"Disabled-Button\" disabled>Add Stocks</button>;\n        }\n\n        var currentlyShowingCurrency = \"$\";\n        var notShowingCurrency = \"€\";\n        if (showingEuro) {\n            currentlyShowingCurrency = \"€\";\n            notShowingCurrency = \"$\";\n        }\n\n        const totalValue = this.calculateTotalValue();\n\n        var formHeaderWrapper = \"Portfolio-Board-Header-Wrapper\";\n        if(stocks.length>4){\n            formHeaderWrapper+=\" Portfolio-Board-Scrollbar\"\n        }\n\n        // Separate tbodies from headers due to react not reading {stocks} correctly otherwise\n        return (\n            <div className=\"App-Portfolio\">\n                <div className=\"row\">\n                    {titleField}\n                    <button onClick={() => this.toggleEditing()}>{toggleText}</button>\n                    <button className=\"Exit-Button\" onClick={() => this.props.onClick(this.props.id)}>X</button>\n                </div>\n\n                <div className=\"row\">\n                    <span className=\"bold\">Showing </span><span className=\"bold large\">{currentlyShowingCurrency}</span>\n                    <button onClick={() => this.toggleShowingEuro()}>Show in {notShowingCurrency}</button>\n                    <span className=\"Error-Text\">{errorText}</span>\n                </div>\n\n                <div className=\"row\">\n                <div className={formHeaderWrapper}>\n                    <table className=\"Portfolio-Board\">\n                        <tbody>\n                            <tr>\n                                <th className=\"large-col\">Name</th>\n                                <th className=\"large-col\">Unit value</th>\n                                <th className=\"small-col\">Quantity</th>\n                                <th className=\"large-col\">Total value</th>\n                                <th className=\"small-col\">Select</th>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                    <div className=\"Portfolio-Board-Wrapper\">\n                        <table className=\"Portfolio-Board\">\n                            <tbody>\n                                {stocks}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className=\"row\">Total value: {totalValue}{currentlyShowingCurrency}</div>\n                {addStockFields}\n                <div className=\"row\">\n                    {addStockButton}\n                    {removeSelectedButton}                    \n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Portfolio;","import React, { Component } from 'react';\nimport './App.css';\nimport Portfolio from './components/Portfolio'\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // this.API_KEY = \"PH3K5QD8FR375RC3\";\n    // this.API_KEY = \"UFUKA50N6XJ3YQQB\";\n    this.API_KEY = \"5V5OEOEN5K98E697\";\n    const localStorageState = JSON.parse(window.localStorage.getItem(\"saved_state\"));\n    console.log(\"Loaded State: \" + window.localStorage.getItem(\"saved_state\"));\n    if (localStorageState) {\n      this.state = localStorageState;\n    } else {\n      this.state = {\n        EXCHANGE_RATE_USD_TO_EUR: 0,\n        triedInitExchangeRateLoad: false,\n        errorText: \"\",\n        infoText: \"\",\n        portfolioCount: 0,\n        portfolios: [],\n        nextId: 0,\n      };\n    }\n  }\n\n  savePortfolio(id, portfolioState) {\n    var portfolios = this.state.portfolios;\n    for (var i = 0; i < portfolios.length; i++) {\n      if (portfolios[i].id === id) {\n        const newPortfolio = {\n          id: id,\n          state: portfolioState,\n        };\n        portfolios.splice(i, 1, newPortfolio);\n      }\n    }\n    this.setState({ portfolios: portfolios });\n    this.updateExchangeRate();\n    this.setInfoText(\"\");\n    this.setErrorText(\"\");\n  }\n\n  componentDidUpdate() {\n    const state = this.state;\n    console.log(\"Saved State:\" + JSON.stringify(state));\n    window.localStorage.setItem(\"saved_state\", JSON.stringify(state));\n  }\n\n  removePortfolio(id) {\n    var newPortfolioCount = this.state.portfolioCount;\n    var newPortfolios = this.state.portfolios;\n    const nextId = this.state.nextId;\n    var removed = false;\n    for (var i = 0; i < newPortfolios.length; i++) {\n      if (newPortfolios[i].id === id) {\n        newPortfolios.splice(i, 1);\n        removed = true;\n        newPortfolioCount--;\n        break;\n      }\n    }\n\n    if (!removed) {\n      console.log(\"Nothing Removed\");\n    }\n\n    this.setState(\n      {\n        portfolioCount: newPortfolioCount,\n        portfolios: newPortfolios,\n        nextId: nextId\n      }\n    );\n  }\n\n  addPortfolio() {\n    const portfolioCount = this.state.portfolioCount;\n    var newPortfolios = this.state.portfolios;\n    const nextId = this.state.nextId;\n    if (portfolioCount < 10) {\n      newPortfolios.push(\n        { id: nextId }\n      );\n      this.setInfoText(\"Added Portfolio (\" + newPortfolios.length + \")\")\n      this.setState({\n        portfolioCount: portfolioCount + 1,\n        portfolios: newPortfolios,\n        nextId: nextId + 1,\n      }\n      );\n    }\n    this.updateExchangeRate();\n  }\n\n  /* Not updating more than once due to limited API calls*/\n  updateExchangeRate() {\n    if (this.state.EXCHANGE_RATE_USD_TO_EUR === 0) {\n      if (!this.state.triedInitExchangeRateLoad) {\n        this.setState({ triedInitExchangeRateLoad: true })\n      }\n      const url = \"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=\" + this.props.API_KEY;\n      axios.get(url).then(res => {\n        var response = res.data['Realtime Currency Exchange Rate'];\n        if (response == null) {\n          this.setErrorText(\"Error getting exchange rate data from API, probably overused API-key. Add new Portfolio or stock to retry.\");\n        } else {\n          var exchangeRate = response['5. Exchange Rate'];\n          this.setState({ EXCHANGE_RATE_USD_TO_EUR: exchangeRate });\n          this.setErrorText(\"\");\n        }\n      })\n        .catch(error => { console.log(error); this.setErrorText(\"Error during updating exchange rate: \" + error) });\n    }\n  }\n  setErrorText(errorText) {\n    this.setState({ errorText: errorText })\n  }\n\n  setInfoText(infoText) {\n    this.setState({ infoText: infoText })\n  }\n\n  render() {\n    if (!this.state.triedInitExchangeRateLoad) {\n      this.updateExchangeRate();\n    }\n    const portfolioCount = this.state.portfolioCount;\n    var addPortfolioButton = <button id=\"addPortfolioButton\" onClick={() => this.addPortfolio()}>Add Portfolio</button>\n    if (portfolioCount > 9) {\n      addPortfolioButton = <button className=\"Disabled-Button\" id=\"addPortfolioButton\" disabled>Add Portfolio</button>\n    }\n    const portfoliosState = this.state.portfolios;\n    const portfolios = [];\n    for (var i = 0; i < portfoliosState.length; i++) {\n      const id = portfoliosState[i].id;\n      const savedPortfolioState = portfoliosState[i].state;\n      portfolios.push(\n        <Portfolio\n          key={id}\n          id={id}\n          API_KEY={this.API_KEY}\n          EXCHANGE_RATE_USD_TO_EUR={this.state.EXCHANGE_RATE_USD_TO_EUR}\n          state={savedPortfolioState}\n          onClick={() => this.removePortfolio(id)}\n          savePortfolio={(state) => this.savePortfolio(id, state)}\n        />\n      );\n    }\n    const errorText = this.state.errorText;\n    const infoText = this.state.infoText;\n    return (\n      <div className=\"App\">\n        {addPortfolioButton}\n        <div className=\"row Info-Row\">\n          <p className=\"Error-Text\">{errorText}</p>\n          <p className=\"Info-Text\">{infoText}</p>\n        </div>\n        <div className=\"App-Portfolios\">\n          {portfolios}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}